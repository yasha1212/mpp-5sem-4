using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TestsGenerator
{
    public class TestClass
    {
        public string FileName { get; private set; }
        public string SourceCode { get; private set; }

        public TestClass(string fileName, string code)
        {
            FileName = fileName;
            SourceCode = code;
        }
    }

    public class TestsGenerator
    {
        public List<TestClass> Generate(string sourceCode)
        {
            var syntaxTree = CSharpSyntaxTree.ParseText(sourceCode);
            var classes = syntaxTree.GetRoot().DescendantNodes().OfType<ClassDeclarationSyntax>().ToList();
            var namespaceDecl = syntaxTree.GetRoot().DescendantNodes().OfType<NamespaceDeclarationSyntax>().ToList()[0];

            var testClasses = new List<TestClass>();

            foreach (var classDecl in classes)
            {
                var methods = classDecl.DescendantNodes().OfType<MethodDeclarationSyntax>()
                    .Where(method => !method.Modifiers.Any(modifier => modifier.Text == "private")).ToList();

                if (methods.Count > 0)
                {
                    var testSourceCode = new StringBuilder();

                    testSourceCode.Append("using Microsoft.VisualStudio.TestTools.UnitTesting;\n");
                    testSourceCode.Append($"using {namespaceDecl.Name};\n\n");
                    testSourceCode.Append($"namespace {namespaceDecl.Name}.Tests\n{{\n");
                    testSourceCode.Append("\t[TestClass]\n");
                    testSourceCode.Append($"\tpublic class {classDecl.Identifier.Text}Tests\n\t{{");

                    foreach (var methodDecl in methods)
                    {
                        testSourceCode.Append("\n\t\t[TestMethod]\n");
                        testSourceCode.Append($"\t\tpublic void {methodDecl.Identifier.Text}Test()\n\t\t{{\n");
                        testSourceCode.Append($"\t\t\tAssert.Fail(\"autogenerated\");\n\t\t}}\n");
                    }

                    testSourceCode.Append($"\t}}\n}}\n");

                    testClasses.Add(new TestClass(String.Format($"{classDecl.Identifier.Text}Tests.cs"), testSourceCode.ToString()));
                }
            }

            return testClasses;
        }
    }
}
